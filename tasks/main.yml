---

- name: Add Prometheus Helm charts repository
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: https://prometheus-community.github.io/helm-charts

- name: Create a list of targets with node-exporter
  set_fact:
    targets_os: 
      targets: ['{{ hostvars[item]["ansible_host"] }}:9100']
      labels:
        instance: '{{ hostvars[item]["kypo_global_sandbox_name"] }}-{{ hostvars[item]["inventory_hostname"] }}'
        sandbox: '{{ hostvars[item]["kypo_global_sandbox_name"] }}'
  loop: "{{ [] if groups['monitor-os'] is undefined else groups['monitor-os'] if groups['monitor-os']|length > 0 else groups['all'] }}"
  register: target_list_os

- name: Create a list of targets for icmp monitoring
  set_fact:
    targets_icmp:
      targets: ['{{ hostvars[item]["ansible_host"] }}']
      labels:
        instance: '{{ hostvars[item]["kypo_global_sandbox_name"] }}-{{ hostvars[item]["inventory_hostname"] }}'
        sandbox: '{{ hostvars[item]["kypo_global_sandbox_name"] }}'
  loop: "{{ [] if groups['monitor-icmp'] is undefined else groups['monitor-icmp'] if groups['monitor-icmp']|length>0 else groups['all'] }}"
  register: target_list_icmp

- name: Parse monitored_hosts group for TCP targets
  set_fact:
    monitored_interfaces: "{{ hostvars[item]['targets'] }}"
  loop: "{{ groups['monitored_hosts'] }}"
  register: monitored_interfaces_list
  when: groups['monitored_hosts'] is defined

- name: Create a list of targets for tcp monitoring from monitored_interfaces_list fact
  set_fact:
    targets_tcp:
      targets: ["{{ hostvars[item[0]['item']]['ansible_facts'][item[1]['interface']].ipv4.address | default(hostvars[item[0]['item']]['ansible_facts'][item[1]['interface']].ipv4[0].address) }}:{{ item[1]['port'] }}"]
      labels:
        instance: '{{ hostvars[item[0]["item"]]["kypo_global_sandbox_name"] }}-{{ hostvars[item[0]["item"]]["inventory_hostname"] }}:{{ item[1]["port"] }}'
        sandbox: '{{ hostvars[item[0]["item"]]["kypo_global_sandbox_name"] }}'
  loop: "{{ monitored_interfaces_list.results | default({}) | subelements('ansible_facts.monitored_interfaces', skip_missing=True) }}"
  register: target_list_tcp

- name: Create scrapeConfigs
  set_fact:
    scrapeConfigs:
      - job_name: "sandbox-{{ kypo_global_sandbox_allocation_unit_id }}"
        metrics_path: "/metrics"
        static_configs: "{{ target_list_os.results | map(attribute='ansible_facts.targets_os') | list }}"
      - job_name: "blackbox-icmp-sandbox-{{ kypo_global_sandbox_allocation_unit_id }}"
        metrics_path: "/probe"
        scrape_timeout: "15s"
        scrape_interval: "15s"
        params:
          module: [icmp]
        static_configs: "{{ target_list_icmp.results | default('') | map(attribute='ansible_facts.targets_icmp') | list }}"
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: prometheus-blackbox-exporter:9115
      - job_name: "blackbox-tcp-sandbox-{{ kypo_global_sandbox_allocation_unit_id }}"
        metrics_path: "/probe"
        scrape_timeout: "15s"
        scrape_interval: "15s"
        params:
          module: [tcp]
        static_configs: "{{ target_list_tcp.results | default('') | map(attribute='ansible_facts.targets_tcp') | list }}"
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: prometheus-blackbox-exporter:9115

- name: Merge scrapeConfigs with customScrapeConfigs
  set_fact:
    additionalScrapeConfigs: "{{ scrapeConfigs | community.general.lists_mergeby(customScrapeConfigs, 'job_name') }}"

- name: Deploy prometheus
  kubernetes.core.helm:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    name: prometheus
    chart_ref: prometheus-community/kube-prometheus-stack
    release_namespace: prometheus
    wait: True
    atomic: True
    update_repo_cache: True
    create_namespace: True
    values:
      alertmanager:
        enabled: false
      grafana:
        enabled: false
      prometheus:
        service:
          type: LoadBalancer
        prometheusSpec:
          additionalScrapeConfigs: "{{ additionalScrapeConfigs }}"

  register: result
  retries: 5
  delay: 10
  until: result is not failed
